id: PriorityQueue
language: CSharp
name:
  Default: PriorityQueue
qualifiedName:
  Default: PriorityQueue
type: Assembly
modifiers: {}
items:
- id: System.Collections
  commentId: N:System.Collections
  language: CSharp
  name:
    CSharp: System.Collections
    VB: System.Collections
  nameWithType:
    CSharp: System.Collections
    VB: System.Collections
  qualifiedName:
    CSharp: System.Collections
    VB: System.Collections
  type: Namespace
  assemblies:
  - PriorityQueue
  modifiers: {}
  items:
  - id: System.Collections.PriorityQueue`1
    commentId: T:System.Collections.PriorityQueue`1
    language: CSharp
    name:
      CSharp: PriorityQueue<T>
      VB: PriorityQueue(Of T)
    nameWithType:
      CSharp: PriorityQueue<T>
      VB: PriorityQueue(Of T)
    qualifiedName:
      CSharp: System.Collections.PriorityQueue<T>
      VB: System.Collections.PriorityQueue(Of T)
    type: Class
    assemblies:
    - PriorityQueue
    namespace: System.Collections
    source:
      remote:
        path: PriorityQueue/PriorityQueue.cs
        branch: master
        repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
      id: PriorityQueue
      path: ../PriorityQueue.cs
      startLine: 9
    summary: "\nMinHeap implementation of a priorityqueue.\n"
    example: []
    syntax:
      content:
        CSharp: public class PriorityQueue<T>
        VB: Public Class PriorityQueue(Of T)
      typeParameters:
      - id: T
        description: Type of the container.
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: System.Collections.PriorityQueue`1.Count
      commentId: P:System.Collections.PriorityQueue`1.Count
      language: CSharp
      name:
        CSharp: Count
        VB: Count
      nameWithType:
        CSharp: PriorityQueue<T>.Count
        VB: PriorityQueue(Of T).Count
      qualifiedName:
        CSharp: System.Collections.PriorityQueue<T>.Count
        VB: System.Collections.PriorityQueue(Of T).Count
      type: Property
      assemblies:
      - PriorityQueue
      namespace: System.Collections
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: Count
        path: ../PriorityQueue.cs
        startLine: 13
      summary: "\nReturns the amount of items in the queue.\n"
      example: []
      syntax:
        content:
          CSharp: public int Count { get; }
          VB: Public ReadOnly Property Count As Integer
        parameters: []
        return:
          type: System.Int32
      overload: System.Collections.PriorityQueue`1.Count*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: System.Collections.PriorityQueue`1.Empty
      commentId: P:System.Collections.PriorityQueue`1.Empty
      language: CSharp
      name:
        CSharp: Empty
        VB: Empty
      nameWithType:
        CSharp: PriorityQueue<T>.Empty
        VB: PriorityQueue(Of T).Empty
      qualifiedName:
        CSharp: System.Collections.PriorityQueue<T>.Empty
        VB: System.Collections.PriorityQueue(Of T).Empty
      type: Property
      assemblies:
      - PriorityQueue
      namespace: System.Collections
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: Empty
        path: ../PriorityQueue.cs
        startLine: 17
      summary: "\nReturns true if the queue is empty.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Empty { get; }
          VB: Public ReadOnly Property Empty As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: System.Collections.PriorityQueue`1.Empty*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: System.Collections.PriorityQueue`1.#ctor(System.Func{`0,`0,System.Int32})
      commentId: M:System.Collections.PriorityQueue`1.#ctor(System.Func{`0,`0,System.Int32})
      language: CSharp
      name:
        CSharp: PriorityQueue(Func<T, T, Int32>)
        VB: PriorityQueue(Func(Of T, T, Int32))
      nameWithType:
        CSharp: PriorityQueue<T>.PriorityQueue(Func<T, T, Int32>)
        VB: PriorityQueue(Of T).PriorityQueue(Func(Of T, T, Int32))
      qualifiedName:
        CSharp: System.Collections.PriorityQueue<T>.PriorityQueue(System.Func<T, T, System.Int32>)
        VB: System.Collections.PriorityQueue(Of T).PriorityQueue(System.Func(Of T, T, System.Int32))
      type: Constructor
      assemblies:
      - PriorityQueue
      namespace: System.Collections
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: .ctor
        path: ../PriorityQueue.cs
        startLine: 28
      summary: "\nCreates a new instance of type <xref href=\"System.Collections.PriorityQueue%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public PriorityQueue(Func<T, T, int> compareFunc)
          VB: Public Sub New(compareFunc As Func(Of T, T, Integer))
        parameters:
        - id: compareFunc
          type: System.Func{{T},{T},System.Int32}
          description: Function to compare two values. The Function returns -1 for lower than, 0 for equality and 1 for greater than.
      overload: System.Collections.PriorityQueue`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        System.Collections.PriorityQueue`1: 
    - id: System.Collections.PriorityQueue`1.#ctor(System.Func{`0,`0,System.Int32},System.Int32)
      commentId: M:System.Collections.PriorityQueue`1.#ctor(System.Func{`0,`0,System.Int32},System.Int32)
      language: CSharp
      name:
        CSharp: PriorityQueue(Func<T, T, Int32>, Int32)
        VB: PriorityQueue(Func(Of T, T, Int32), Int32)
      nameWithType:
        CSharp: PriorityQueue<T>.PriorityQueue(Func<T, T, Int32>, Int32)
        VB: PriorityQueue(Of T).PriorityQueue(Func(Of T, T, Int32), Int32)
      qualifiedName:
        CSharp: System.Collections.PriorityQueue<T>.PriorityQueue(System.Func<T, T, System.Int32>, System.Int32)
        VB: System.Collections.PriorityQueue(Of T).PriorityQueue(System.Func(Of T, T, System.Int32), System.Int32)
      type: Constructor
      assemblies:
      - PriorityQueue
      namespace: System.Collections
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: .ctor
        path: ../PriorityQueue.cs
        startLine: 37
      summary: "\nCreates a new instance of type <xref href=\"System.Collections.PriorityQueue%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public PriorityQueue(Func<T, T, int> compareFunc, int capacity)
          VB: Public Sub New(compareFunc As Func(Of T, T, Integer), capacity As Integer)
        parameters:
        - id: compareFunc
          type: System.Func{{T},{T},System.Int32}
          description: Function to compare two values. The Function returns -1 for lower than, 0 for equality and 1 for greater than.
        - id: capacity
          type: System.Int32
          description: Initial capacity.
      overload: System.Collections.PriorityQueue`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        System.Collections.PriorityQueue`1: 
    - id: System.Collections.PriorityQueue`1.#ctor(System.Func{`0,`0,System.Int32},System.Collections.Generic.IEnumerable{`0})
      commentId: M:System.Collections.PriorityQueue`1.#ctor(System.Func{`0,`0,System.Int32},System.Collections.Generic.IEnumerable{`0})
      language: CSharp
      name:
        CSharp: PriorityQueue(Func<T, T, Int32>, IEnumerable<T>)
        VB: PriorityQueue(Func(Of T, T, Int32), IEnumerable(Of T))
      nameWithType:
        CSharp: PriorityQueue<T>.PriorityQueue(Func<T, T, Int32>, IEnumerable<T>)
        VB: PriorityQueue(Of T).PriorityQueue(Func(Of T, T, Int32), IEnumerable(Of T))
      qualifiedName:
        CSharp: System.Collections.PriorityQueue<T>.PriorityQueue(System.Func<T, T, System.Int32>, System.Collections.Generic.IEnumerable<T>)
        VB: System.Collections.PriorityQueue(Of T).PriorityQueue(System.Func(Of T, T, System.Int32), System.Collections.Generic.IEnumerable(Of T))
      type: Constructor
      assemblies:
      - PriorityQueue
      namespace: System.Collections
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: .ctor
        path: ../PriorityQueue.cs
        startLine: 46
      summary: "\nCreates a new instance of type <xref href=\"System.Collections.PriorityQueue%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public PriorityQueue(Func<T, T, int> compareFunc, IEnumerable<T> collection)
          VB: Public Sub New(compareFunc As Func(Of T, T, Integer), collection As IEnumerable(Of T))
        parameters:
        - id: compareFunc
          type: System.Func{{T},{T},System.Int32}
          description: Function to compare two values. The Function returns -1 for lower than, 0 for equality and 1 for greater than.
        - id: collection
          type: System.Collections.Generic.IEnumerable{{T}}
          description: Initial entries in the queue.
      overload: System.Collections.PriorityQueue`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        System.Collections.PriorityQueue`1: 
    - id: System.Collections.PriorityQueue`1.Enqueue(`0)
      commentId: M:System.Collections.PriorityQueue`1.Enqueue(`0)
      language: CSharp
      name:
        CSharp: Enqueue(T)
        VB: Enqueue(T)
      nameWithType:
        CSharp: PriorityQueue<T>.Enqueue(T)
        VB: PriorityQueue(Of T).Enqueue(T)
      qualifiedName:
        CSharp: System.Collections.PriorityQueue<T>.Enqueue(T)
        VB: System.Collections.PriorityQueue(Of T).Enqueue(T)
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: Enqueue
        path: ../PriorityQueue.cs
        startLine: 58
      summary: "\nAdds an item to the queue.\n"
      example: []
      syntax:
        content:
          CSharp: public void Enqueue(T item)
          VB: Public Sub Enqueue(item As T)
        parameters:
        - id: item
          type: '{T}'
          description: Object to add to the queue.
      overload: System.Collections.PriorityQueue`1.Enqueue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.PriorityQueue`1.Dequeue
      commentId: M:System.Collections.PriorityQueue`1.Dequeue
      language: CSharp
      name:
        CSharp: Dequeue()
        VB: Dequeue()
      nameWithType:
        CSharp: PriorityQueue<T>.Dequeue()
        VB: PriorityQueue(Of T).Dequeue()
      qualifiedName:
        CSharp: System.Collections.PriorityQueue<T>.Dequeue()
        VB: System.Collections.PriorityQueue(Of T).Dequeue()
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: Dequeue
        path: ../PriorityQueue.cs
        startLine: 66
      summary: "\nRemoves the first item in the queue and returns it.\n"
      example: []
      syntax:
        content:
          CSharp: public T Dequeue()
          VB: Public Function Dequeue As T
        return:
          type: '{T}'
          description: Popped entry of type <see cref="!:T"></see>
      overload: System.Collections.PriorityQueue`1.Dequeue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.PriorityQueue`1.Peek
      commentId: M:System.Collections.PriorityQueue`1.Peek
      language: CSharp
      name:
        CSharp: Peek()
        VB: Peek()
      nameWithType:
        CSharp: PriorityQueue<T>.Peek()
        VB: PriorityQueue(Of T).Peek()
      qualifiedName:
        CSharp: System.Collections.PriorityQueue<T>.Peek()
        VB: System.Collections.PriorityQueue(Of T).Peek()
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: Peek
        path: ../PriorityQueue.cs
        startLine: 80
      summary: "\nReturns the first item in the queue.\n"
      example: []
      syntax:
        content:
          CSharp: public T Peek()
          VB: Public Function Peek As T
        return:
          type: '{T}'
          description: Entry of type <see cref="!:T"></see>
      overload: System.Collections.PriorityQueue`1.Peek*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.PriorityQueue`1.Clear
      commentId: M:System.Collections.PriorityQueue`1.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: PriorityQueue<T>.Clear()
        VB: PriorityQueue(Of T).Clear()
      qualifiedName:
        CSharp: System.Collections.PriorityQueue<T>.Clear()
        VB: System.Collections.PriorityQueue(Of T).Clear()
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: Clear
        path: ../PriorityQueue.cs
        startLine: 86
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear
      overload: System.Collections.PriorityQueue`1.Clear*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.PriorityQueue`1.Contains(`0)
      commentId: M:System.Collections.PriorityQueue`1.Contains(`0)
      language: CSharp
      name:
        CSharp: Contains(T)
        VB: Contains(T)
      nameWithType:
        CSharp: PriorityQueue<T>.Contains(T)
        VB: PriorityQueue(Of T).Contains(T)
      qualifiedName:
        CSharp: System.Collections.PriorityQueue<T>.Contains(T)
        VB: System.Collections.PriorityQueue(Of T).Contains(T)
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: Contains
        path: ../PriorityQueue.cs
        startLine: 88
      syntax:
        content:
          CSharp: public bool Contains(T item)
          VB: Public Function Contains(item As T) As Boolean
        parameters:
        - id: item
          type: '{T}'
        return:
          type: System.Boolean
      overload: System.Collections.PriorityQueue`1.Contains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.PriorityQueue`1.CopyTo(`0[])
      commentId: M:System.Collections.PriorityQueue`1.CopyTo(`0[])
      language: CSharp
      name:
        CSharp: CopyTo(T[])
        VB: CopyTo(T())
      nameWithType:
        CSharp: PriorityQueue<T>.CopyTo(T[])
        VB: PriorityQueue(Of T).CopyTo(T())
      qualifiedName:
        CSharp: System.Collections.PriorityQueue<T>.CopyTo(T[])
        VB: System.Collections.PriorityQueue(Of T).CopyTo(T())
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: CopyTo
        path: ../PriorityQueue.cs
        startLine: 90
      syntax:
        content:
          CSharp: public void CopyTo(T[] array)
          VB: Public Sub CopyTo(array As T())
        parameters:
        - id: array
          type: '{T}[]'
      overload: System.Collections.PriorityQueue`1.CopyTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.PriorityQueue`1.CopyTo(`0[],System.Int32)
      commentId: M:System.Collections.PriorityQueue`1.CopyTo(`0[],System.Int32)
      language: CSharp
      name:
        CSharp: CopyTo(T[], Int32)
        VB: CopyTo(T(), Int32)
      nameWithType:
        CSharp: PriorityQueue<T>.CopyTo(T[], Int32)
        VB: PriorityQueue(Of T).CopyTo(T(), Int32)
      qualifiedName:
        CSharp: System.Collections.PriorityQueue<T>.CopyTo(T[], System.Int32)
        VB: System.Collections.PriorityQueue(Of T).CopyTo(T(), System.Int32)
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: CopyTo
        path: ../PriorityQueue.cs
        startLine: 92
      syntax:
        content:
          CSharp: public void CopyTo(T[] array, int arrayIndex)
          VB: Public Sub CopyTo(array As T(), arrayIndex As Integer)
        parameters:
        - id: array
          type: '{T}[]'
        - id: arrayIndex
          type: System.Int32
      overload: System.Collections.PriorityQueue`1.CopyTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.PriorityQueue`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
      commentId: M:System.Collections.PriorityQueue`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: CopyTo(Int32, T[], Int32, Int32)
        VB: CopyTo(Int32, T(), Int32, Int32)
      nameWithType:
        CSharp: PriorityQueue<T>.CopyTo(Int32, T[], Int32, Int32)
        VB: PriorityQueue(Of T).CopyTo(Int32, T(), Int32, Int32)
      qualifiedName:
        CSharp: System.Collections.PriorityQueue<T>.CopyTo(System.Int32, T[], System.Int32, System.Int32)
        VB: System.Collections.PriorityQueue(Of T).CopyTo(System.Int32, T(), System.Int32, System.Int32)
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: CopyTo
        path: ../PriorityQueue.cs
        startLine: 94
      syntax:
        content:
          CSharp: public void CopyTo(int index, T[] array, int arrayIndex, int count)
          VB: Public Sub CopyTo(index As Integer, array As T(), arrayIndex As Integer, count As Integer)
        parameters:
        - id: index
          type: System.Int32
        - id: array
          type: '{T}[]'
        - id: arrayIndex
          type: System.Int32
        - id: count
          type: System.Int32
      overload: System.Collections.PriorityQueue`1.CopyTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.PriorityQueue`1.ToArray
      commentId: M:System.Collections.PriorityQueue`1.ToArray
      language: CSharp
      name:
        CSharp: ToArray()
        VB: ToArray()
      nameWithType:
        CSharp: PriorityQueue<T>.ToArray()
        VB: PriorityQueue(Of T).ToArray()
      qualifiedName:
        CSharp: System.Collections.PriorityQueue<T>.ToArray()
        VB: System.Collections.PriorityQueue(Of T).ToArray()
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: ToArray
        path: ../PriorityQueue.cs
        startLine: 96
      syntax:
        content:
          CSharp: public T[] ToArray()
          VB: Public Function ToArray As T()
        return:
          type: '{T}[]'
      overload: System.Collections.PriorityQueue`1.ToArray*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.PriorityQueue`1.TrimExcess
      commentId: M:System.Collections.PriorityQueue`1.TrimExcess
      language: CSharp
      name:
        CSharp: TrimExcess()
        VB: TrimExcess()
      nameWithType:
        CSharp: PriorityQueue<T>.TrimExcess()
        VB: PriorityQueue(Of T).TrimExcess()
      qualifiedName:
        CSharp: System.Collections.PriorityQueue<T>.TrimExcess()
        VB: System.Collections.PriorityQueue(Of T).TrimExcess()
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: TrimExcess
        path: ../PriorityQueue.cs
        startLine: 98
      syntax:
        content:
          CSharp: public void TrimExcess()
          VB: Public Sub TrimExcess
      overload: System.Collections.PriorityQueue`1.TrimExcess*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.PriorityQueue`1.ToString
      commentId: M:System.Collections.PriorityQueue`1.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: PriorityQueue<T>.ToString()
        VB: PriorityQueue(Of T).ToString()
      qualifiedName:
        CSharp: System.Collections.PriorityQueue<T>.ToString()
        VB: System.Collections.PriorityQueue(Of T).ToString()
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: ToString
        path: ../PriorityQueue.cs
        startLine: 154
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: System.Collections.PriorityQueue`1.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: System.Collections.PriorityQueue`1.Equals(System.Object)
      commentId: M:System.Collections.PriorityQueue`1.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: PriorityQueue<T>.Equals(Object)
        VB: PriorityQueue(Of T).Equals(Object)
      qualifiedName:
        CSharp: System.Collections.PriorityQueue<T>.Equals(System.Object)
        VB: System.Collections.PriorityQueue(Of T).Equals(System.Object)
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: Equals
        path: ../PriorityQueue.cs
        startLine: 165
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: System.Collections.PriorityQueue`1.Equals*
      overridden: System.Object.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: System.Collections.PriorityQueue`1.GetHashCode
      commentId: M:System.Collections.PriorityQueue`1.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: PriorityQueue<T>.GetHashCode()
        VB: PriorityQueue(Of T).GetHashCode()
      qualifiedName:
        CSharp: System.Collections.PriorityQueue<T>.GetHashCode()
        VB: System.Collections.PriorityQueue(Of T).GetHashCode()
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: GetHashCode
        path: ../PriorityQueue.cs
        startLine: 170
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: System.Collections.PriorityQueue`1.GetHashCode*
      overridden: System.Object.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
- id: System.Collections.Generic
  commentId: N:System.Collections.Generic
  language: CSharp
  name:
    CSharp: System.Collections.Generic
    VB: System.Collections.Generic
  nameWithType:
    CSharp: System.Collections.Generic
    VB: System.Collections.Generic
  qualifiedName:
    CSharp: System.Collections.Generic
    VB: System.Collections.Generic
  type: Namespace
  assemblies:
  - PriorityQueue
  modifiers: {}
  items:
  - id: System.Collections.Generic.PriorityQueue`1
    commentId: T:System.Collections.Generic.PriorityQueue`1
    language: CSharp
    name:
      CSharp: PriorityQueue<T>
      VB: PriorityQueue(Of T)
    nameWithType:
      CSharp: PriorityQueue<T>
      VB: PriorityQueue(Of T)
    qualifiedName:
      CSharp: System.Collections.Generic.PriorityQueue<T>
      VB: System.Collections.Generic.PriorityQueue(Of T)
    type: Class
    assemblies:
    - PriorityQueue
    namespace: System.Collections.Generic
    source:
      remote:
        path: PriorityQueue/PriorityQueue.cs
        branch: master
        repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
      id: PriorityQueue
      path: ../PriorityQueue.cs
      startLine: 220
    summary: "\nMinHeap implementation of a priorityqueue.\n"
    example: []
    syntax:
      content:
        CSharp: >-
          public class PriorityQueue<T>

              where T : IComparable<T>
        VB: Public Class PriorityQueue(Of T As IComparable(Of T))
      typeParameters:
      - id: T
        description: Type of the container. Needs to implement <xref href="System.IComparable" data-throw-if-not-resolved="false"></xref>
    inheritance:
    - System.Object
    inheritedMembers:
    - System.Object.Equals(System.Object,System.Object)
    - System.Object.ReferenceEquals(System.Object,System.Object)
    - System.Object.GetType
    - System.Object.MemberwiseClone
    modifiers:
      CSharp:
      - public
      - class
      VB:
      - Public
      - Class
    items:
    - id: System.Collections.Generic.PriorityQueue`1.Count
      commentId: P:System.Collections.Generic.PriorityQueue`1.Count
      language: CSharp
      name:
        CSharp: Count
        VB: Count
      nameWithType:
        CSharp: PriorityQueue<T>.Count
        VB: PriorityQueue(Of T).Count
      qualifiedName:
        CSharp: System.Collections.Generic.PriorityQueue<T>.Count
        VB: System.Collections.Generic.PriorityQueue(Of T).Count
      type: Property
      assemblies:
      - PriorityQueue
      namespace: System.Collections.Generic
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: Count
        path: ../PriorityQueue.cs
        startLine: 224
      summary: "\nReturns the amount of items in the Queue.\n"
      example: []
      syntax:
        content:
          CSharp: public int Count { get; }
          VB: Public ReadOnly Property Count As Integer
        parameters: []
        return:
          type: System.Int32
      overload: System.Collections.Generic.PriorityQueue`1.Count*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: System.Collections.Generic.PriorityQueue`1.Empty
      commentId: P:System.Collections.Generic.PriorityQueue`1.Empty
      language: CSharp
      name:
        CSharp: Empty
        VB: Empty
      nameWithType:
        CSharp: PriorityQueue<T>.Empty
        VB: PriorityQueue(Of T).Empty
      qualifiedName:
        CSharp: System.Collections.Generic.PriorityQueue<T>.Empty
        VB: System.Collections.Generic.PriorityQueue(Of T).Empty
      type: Property
      assemblies:
      - PriorityQueue
      namespace: System.Collections.Generic
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: Empty
        path: ../PriorityQueue.cs
        startLine: 228
      summary: "\nReturns true if the Queue is empty.\n"
      example: []
      syntax:
        content:
          CSharp: public bool Empty { get; }
          VB: Public ReadOnly Property Empty As Boolean
        parameters: []
        return:
          type: System.Boolean
      overload: System.Collections.Generic.PriorityQueue`1.Empty*
      modifiers:
        CSharp:
        - public
        - get
        VB:
        - Public
        - ReadOnly
    - id: System.Collections.Generic.PriorityQueue`1.#ctor
      commentId: M:System.Collections.Generic.PriorityQueue`1.#ctor
      language: CSharp
      name:
        CSharp: PriorityQueue()
        VB: PriorityQueue()
      nameWithType:
        CSharp: PriorityQueue<T>.PriorityQueue()
        VB: PriorityQueue(Of T).PriorityQueue()
      qualifiedName:
        CSharp: System.Collections.Generic.PriorityQueue<T>.PriorityQueue()
        VB: System.Collections.Generic.PriorityQueue(Of T).PriorityQueue()
      type: Constructor
      assemblies:
      - PriorityQueue
      namespace: System.Collections.Generic
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: .ctor
        path: ../PriorityQueue.cs
        startLine: 237
      summary: "\nCreates a new instance of type <xref href=\"System.Collections.Generic.PriorityQueue%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public PriorityQueue()
          VB: Public Sub New
      overload: System.Collections.Generic.PriorityQueue`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        System.Collections.Generic.PriorityQueue`1: 
    - id: System.Collections.Generic.PriorityQueue`1.#ctor(System.Int32)
      commentId: M:System.Collections.Generic.PriorityQueue`1.#ctor(System.Int32)
      language: CSharp
      name:
        CSharp: PriorityQueue(Int32)
        VB: PriorityQueue(Int32)
      nameWithType:
        CSharp: PriorityQueue<T>.PriorityQueue(Int32)
        VB: PriorityQueue(Of T).PriorityQueue(Int32)
      qualifiedName:
        CSharp: System.Collections.Generic.PriorityQueue<T>.PriorityQueue(System.Int32)
        VB: System.Collections.Generic.PriorityQueue(Of T).PriorityQueue(System.Int32)
      type: Constructor
      assemblies:
      - PriorityQueue
      namespace: System.Collections.Generic
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: .ctor
        path: ../PriorityQueue.cs
        startLine: 244
      summary: "\nCreates a new instance of type <xref href=\"System.Collections.Generic.PriorityQueue%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public PriorityQueue(int capacity)
          VB: Public Sub New(capacity As Integer)
        parameters:
        - id: capacity
          type: System.Int32
          description: Initial capacity.
      overload: System.Collections.Generic.PriorityQueue`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        System.Collections.Generic.PriorityQueue`1: 
    - id: System.Collections.Generic.PriorityQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
      commentId: M:System.Collections.Generic.PriorityQueue`1.#ctor(System.Collections.Generic.IEnumerable{`0})
      language: CSharp
      name:
        CSharp: PriorityQueue(IEnumerable<T>)
        VB: PriorityQueue(IEnumerable(Of T))
      nameWithType:
        CSharp: PriorityQueue<T>.PriorityQueue(IEnumerable<T>)
        VB: PriorityQueue(Of T).PriorityQueue(IEnumerable(Of T))
      qualifiedName:
        CSharp: System.Collections.Generic.PriorityQueue<T>.PriorityQueue(System.Collections.Generic.IEnumerable<T>)
        VB: System.Collections.Generic.PriorityQueue(Of T).PriorityQueue(System.Collections.Generic.IEnumerable(Of T))
      type: Constructor
      assemblies:
      - PriorityQueue
      namespace: System.Collections.Generic
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: .ctor
        path: ../PriorityQueue.cs
        startLine: 251
      summary: "\nCreates a new instance of type <xref href=\"System.Collections.Generic.PriorityQueue%601\" data-throw-if-not-resolved=\"false\"></xref>.\n"
      example: []
      syntax:
        content:
          CSharp: public PriorityQueue(IEnumerable<T> collection)
          VB: Public Sub New(collection As IEnumerable(Of T))
        parameters:
        - id: collection
          type: System.Collections.Generic.IEnumerable{{T}}
          description: Initial entries in the queue.
      overload: System.Collections.Generic.PriorityQueue`1.#ctor*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
      references:
        System.Collections.Generic.PriorityQueue`1: 
    - id: System.Collections.Generic.PriorityQueue`1.Enqueue(`0)
      commentId: M:System.Collections.Generic.PriorityQueue`1.Enqueue(`0)
      language: CSharp
      name:
        CSharp: Enqueue(T)
        VB: Enqueue(T)
      nameWithType:
        CSharp: PriorityQueue<T>.Enqueue(T)
        VB: PriorityQueue(Of T).Enqueue(T)
      qualifiedName:
        CSharp: System.Collections.Generic.PriorityQueue<T>.Enqueue(T)
        VB: System.Collections.Generic.PriorityQueue(Of T).Enqueue(T)
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections.Generic
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: Enqueue
        path: ../PriorityQueue.cs
        startLine: 262
      summary: "\nAdds an item to the queue.\n"
      example: []
      syntax:
        content:
          CSharp: public void Enqueue(T item)
          VB: Public Sub Enqueue(item As T)
        parameters:
        - id: item
          type: '{T}'
          description: Object to add to the queue.
      overload: System.Collections.Generic.PriorityQueue`1.Enqueue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.Generic.PriorityQueue`1.Dequeue
      commentId: M:System.Collections.Generic.PriorityQueue`1.Dequeue
      language: CSharp
      name:
        CSharp: Dequeue()
        VB: Dequeue()
      nameWithType:
        CSharp: PriorityQueue<T>.Dequeue()
        VB: PriorityQueue(Of T).Dequeue()
      qualifiedName:
        CSharp: System.Collections.Generic.PriorityQueue<T>.Dequeue()
        VB: System.Collections.Generic.PriorityQueue(Of T).Dequeue()
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections.Generic
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: Dequeue
        path: ../PriorityQueue.cs
        startLine: 270
      summary: "\nRemoves the first item in the queue and returns it.\n"
      example: []
      syntax:
        content:
          CSharp: public T Dequeue()
          VB: Public Function Dequeue As T
        return:
          type: '{T}'
          description: Popped entry of type <see cref="!:T"></see>
      overload: System.Collections.Generic.PriorityQueue`1.Dequeue*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.Generic.PriorityQueue`1.Peek
      commentId: M:System.Collections.Generic.PriorityQueue`1.Peek
      language: CSharp
      name:
        CSharp: Peek()
        VB: Peek()
      nameWithType:
        CSharp: PriorityQueue<T>.Peek()
        VB: PriorityQueue(Of T).Peek()
      qualifiedName:
        CSharp: System.Collections.Generic.PriorityQueue<T>.Peek()
        VB: System.Collections.Generic.PriorityQueue(Of T).Peek()
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections.Generic
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: Peek
        path: ../PriorityQueue.cs
        startLine: 284
      summary: "\nReturns the first item in the queue.\n"
      example: []
      syntax:
        content:
          CSharp: public T Peek()
          VB: Public Function Peek As T
        return:
          type: '{T}'
          description: Entry of type <see cref="!:T"></see>
      overload: System.Collections.Generic.PriorityQueue`1.Peek*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.Generic.PriorityQueue`1.Clear
      commentId: M:System.Collections.Generic.PriorityQueue`1.Clear
      language: CSharp
      name:
        CSharp: Clear()
        VB: Clear()
      nameWithType:
        CSharp: PriorityQueue<T>.Clear()
        VB: PriorityQueue(Of T).Clear()
      qualifiedName:
        CSharp: System.Collections.Generic.PriorityQueue<T>.Clear()
        VB: System.Collections.Generic.PriorityQueue(Of T).Clear()
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections.Generic
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: Clear
        path: ../PriorityQueue.cs
        startLine: 290
      syntax:
        content:
          CSharp: public void Clear()
          VB: Public Sub Clear
      overload: System.Collections.Generic.PriorityQueue`1.Clear*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.Generic.PriorityQueue`1.Contains(`0)
      commentId: M:System.Collections.Generic.PriorityQueue`1.Contains(`0)
      language: CSharp
      name:
        CSharp: Contains(T)
        VB: Contains(T)
      nameWithType:
        CSharp: PriorityQueue<T>.Contains(T)
        VB: PriorityQueue(Of T).Contains(T)
      qualifiedName:
        CSharp: System.Collections.Generic.PriorityQueue<T>.Contains(T)
        VB: System.Collections.Generic.PriorityQueue(Of T).Contains(T)
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections.Generic
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: Contains
        path: ../PriorityQueue.cs
        startLine: 292
      syntax:
        content:
          CSharp: public bool Contains(T item)
          VB: Public Function Contains(item As T) As Boolean
        parameters:
        - id: item
          type: '{T}'
        return:
          type: System.Boolean
      overload: System.Collections.Generic.PriorityQueue`1.Contains*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.Generic.PriorityQueue`1.CopyTo(`0[])
      commentId: M:System.Collections.Generic.PriorityQueue`1.CopyTo(`0[])
      language: CSharp
      name:
        CSharp: CopyTo(T[])
        VB: CopyTo(T())
      nameWithType:
        CSharp: PriorityQueue<T>.CopyTo(T[])
        VB: PriorityQueue(Of T).CopyTo(T())
      qualifiedName:
        CSharp: System.Collections.Generic.PriorityQueue<T>.CopyTo(T[])
        VB: System.Collections.Generic.PriorityQueue(Of T).CopyTo(T())
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections.Generic
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: CopyTo
        path: ../PriorityQueue.cs
        startLine: 294
      syntax:
        content:
          CSharp: public void CopyTo(T[] array)
          VB: Public Sub CopyTo(array As T())
        parameters:
        - id: array
          type: '{T}[]'
      overload: System.Collections.Generic.PriorityQueue`1.CopyTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.Generic.PriorityQueue`1.CopyTo(`0[],System.Int32)
      commentId: M:System.Collections.Generic.PriorityQueue`1.CopyTo(`0[],System.Int32)
      language: CSharp
      name:
        CSharp: CopyTo(T[], Int32)
        VB: CopyTo(T(), Int32)
      nameWithType:
        CSharp: PriorityQueue<T>.CopyTo(T[], Int32)
        VB: PriorityQueue(Of T).CopyTo(T(), Int32)
      qualifiedName:
        CSharp: System.Collections.Generic.PriorityQueue<T>.CopyTo(T[], System.Int32)
        VB: System.Collections.Generic.PriorityQueue(Of T).CopyTo(T(), System.Int32)
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections.Generic
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: CopyTo
        path: ../PriorityQueue.cs
        startLine: 296
      syntax:
        content:
          CSharp: public void CopyTo(T[] array, int arrayIndex)
          VB: Public Sub CopyTo(array As T(), arrayIndex As Integer)
        parameters:
        - id: array
          type: '{T}[]'
        - id: arrayIndex
          type: System.Int32
      overload: System.Collections.Generic.PriorityQueue`1.CopyTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.Generic.PriorityQueue`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
      commentId: M:System.Collections.Generic.PriorityQueue`1.CopyTo(System.Int32,`0[],System.Int32,System.Int32)
      language: CSharp
      name:
        CSharp: CopyTo(Int32, T[], Int32, Int32)
        VB: CopyTo(Int32, T(), Int32, Int32)
      nameWithType:
        CSharp: PriorityQueue<T>.CopyTo(Int32, T[], Int32, Int32)
        VB: PriorityQueue(Of T).CopyTo(Int32, T(), Int32, Int32)
      qualifiedName:
        CSharp: System.Collections.Generic.PriorityQueue<T>.CopyTo(System.Int32, T[], System.Int32, System.Int32)
        VB: System.Collections.Generic.PriorityQueue(Of T).CopyTo(System.Int32, T(), System.Int32, System.Int32)
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections.Generic
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: CopyTo
        path: ../PriorityQueue.cs
        startLine: 298
      syntax:
        content:
          CSharp: public void CopyTo(int index, T[] array, int arrayIndex, int count)
          VB: Public Sub CopyTo(index As Integer, array As T(), arrayIndex As Integer, count As Integer)
        parameters:
        - id: index
          type: System.Int32
        - id: array
          type: '{T}[]'
        - id: arrayIndex
          type: System.Int32
        - id: count
          type: System.Int32
      overload: System.Collections.Generic.PriorityQueue`1.CopyTo*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.Generic.PriorityQueue`1.ToArray
      commentId: M:System.Collections.Generic.PriorityQueue`1.ToArray
      language: CSharp
      name:
        CSharp: ToArray()
        VB: ToArray()
      nameWithType:
        CSharp: PriorityQueue<T>.ToArray()
        VB: PriorityQueue(Of T).ToArray()
      qualifiedName:
        CSharp: System.Collections.Generic.PriorityQueue<T>.ToArray()
        VB: System.Collections.Generic.PriorityQueue(Of T).ToArray()
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections.Generic
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: ToArray
        path: ../PriorityQueue.cs
        startLine: 300
      syntax:
        content:
          CSharp: public T[] ToArray()
          VB: Public Function ToArray As T()
        return:
          type: '{T}[]'
      overload: System.Collections.Generic.PriorityQueue`1.ToArray*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.Generic.PriorityQueue`1.TrimExcess
      commentId: M:System.Collections.Generic.PriorityQueue`1.TrimExcess
      language: CSharp
      name:
        CSharp: TrimExcess()
        VB: TrimExcess()
      nameWithType:
        CSharp: PriorityQueue<T>.TrimExcess()
        VB: PriorityQueue(Of T).TrimExcess()
      qualifiedName:
        CSharp: System.Collections.Generic.PriorityQueue<T>.TrimExcess()
        VB: System.Collections.Generic.PriorityQueue(Of T).TrimExcess()
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections.Generic
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: TrimExcess
        path: ../PriorityQueue.cs
        startLine: 302
      syntax:
        content:
          CSharp: public void TrimExcess()
          VB: Public Sub TrimExcess
      overload: System.Collections.Generic.PriorityQueue`1.TrimExcess*
      modifiers:
        CSharp:
        - public
        VB:
        - Public
    - id: System.Collections.Generic.PriorityQueue`1.ToString
      commentId: M:System.Collections.Generic.PriorityQueue`1.ToString
      language: CSharp
      name:
        CSharp: ToString()
        VB: ToString()
      nameWithType:
        CSharp: PriorityQueue<T>.ToString()
        VB: PriorityQueue(Of T).ToString()
      qualifiedName:
        CSharp: System.Collections.Generic.PriorityQueue<T>.ToString()
        VB: System.Collections.Generic.PriorityQueue(Of T).ToString()
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections.Generic
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: ToString
        path: ../PriorityQueue.cs
        startLine: 357
      syntax:
        content:
          CSharp: public override string ToString()
          VB: Public Overrides Function ToString As String
        return:
          type: System.String
      overload: System.Collections.Generic.PriorityQueue`1.ToString*
      overridden: System.Object.ToString
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: System.Collections.Generic.PriorityQueue`1.Equals(System.Object)
      commentId: M:System.Collections.Generic.PriorityQueue`1.Equals(System.Object)
      language: CSharp
      name:
        CSharp: Equals(Object)
        VB: Equals(Object)
      nameWithType:
        CSharp: PriorityQueue<T>.Equals(Object)
        VB: PriorityQueue(Of T).Equals(Object)
      qualifiedName:
        CSharp: System.Collections.Generic.PriorityQueue<T>.Equals(System.Object)
        VB: System.Collections.Generic.PriorityQueue(Of T).Equals(System.Object)
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections.Generic
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: Equals
        path: ../PriorityQueue.cs
        startLine: 368
      syntax:
        content:
          CSharp: public override bool Equals(object obj)
          VB: Public Overrides Function Equals(obj As Object) As Boolean
        parameters:
        - id: obj
          type: System.Object
        return:
          type: System.Boolean
      overload: System.Collections.Generic.PriorityQueue`1.Equals*
      overridden: System.Object.Equals(System.Object)
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    - id: System.Collections.Generic.PriorityQueue`1.GetHashCode
      commentId: M:System.Collections.Generic.PriorityQueue`1.GetHashCode
      language: CSharp
      name:
        CSharp: GetHashCode()
        VB: GetHashCode()
      nameWithType:
        CSharp: PriorityQueue<T>.GetHashCode()
        VB: PriorityQueue(Of T).GetHashCode()
      qualifiedName:
        CSharp: System.Collections.Generic.PriorityQueue<T>.GetHashCode()
        VB: System.Collections.Generic.PriorityQueue(Of T).GetHashCode()
      type: Method
      assemblies:
      - PriorityQueue
      namespace: System.Collections.Generic
      source:
        remote:
          path: PriorityQueue/PriorityQueue.cs
          branch: master
          repo: https://git.fh-aachen.de/jl5227s/priorityqueue-in-.net.git
        id: GetHashCode
        path: ../PriorityQueue.cs
        startLine: 372
      syntax:
        content:
          CSharp: public override int GetHashCode()
          VB: Public Overrides Function GetHashCode As Integer
        return:
          type: System.Int32
      overload: System.Collections.Generic.PriorityQueue`1.GetHashCode*
      overridden: System.Object.GetHashCode
      modifiers:
        CSharp:
        - public
        - override
        VB:
        - Public
        - Overrides
    references:
      System.IComparable: 
references:
  System:
    name:
      CSharp:
      - name: System
        nameWithType: System
        qualifiedName: System
        isExternal: true
      VB:
      - name: System
        nameWithType: System
        qualifiedName: System
    isDefinition: true
    commentId: N:System
  System.Object:
    name:
      CSharp:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      VB:
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Object
  System.Object.Equals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object,System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object,System.Object)
  System.Object.ReferenceEquals(System.Object,System.Object):
    name:
      CSharp:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ReferenceEquals(System.Object,System.Object)
        name: ReferenceEquals
        nameWithType: Object.ReferenceEquals
        qualifiedName: System.Object.ReferenceEquals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  System.Object.GetType:
    name:
      CSharp:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetType
        name: GetType
        nameWithType: Object.GetType
        qualifiedName: System.Object.GetType
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetType
  System.Object.MemberwiseClone:
    name:
      CSharp:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.MemberwiseClone
        name: MemberwiseClone
        nameWithType: Object.MemberwiseClone
        qualifiedName: System.Object.MemberwiseClone
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.MemberwiseClone
  System.Int32:
    name:
      CSharp:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      VB:
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Int32
  System.Collections.PriorityQueue`1.Count*:
    name:
      CSharp:
      - id: System.Collections.PriorityQueue`1.Count*
        name: Count
        nameWithType: PriorityQueue<T>.Count
        qualifiedName: System.Collections.PriorityQueue<T>.Count
      VB:
      - id: System.Collections.PriorityQueue`1.Count*
        name: Count
        nameWithType: PriorityQueue(Of T).Count
        qualifiedName: System.Collections.PriorityQueue(Of T).Count
    isDefinition: true
    commentId: Overload:System.Collections.PriorityQueue`1.Count
  System.Boolean:
    name:
      CSharp:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
      VB:
      - id: System.Boolean
        name: Boolean
        nameWithType: Boolean
        qualifiedName: System.Boolean
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.Boolean
  System.Collections.PriorityQueue`1.Empty*:
    name:
      CSharp:
      - id: System.Collections.PriorityQueue`1.Empty*
        name: Empty
        nameWithType: PriorityQueue<T>.Empty
        qualifiedName: System.Collections.PriorityQueue<T>.Empty
      VB:
      - id: System.Collections.PriorityQueue`1.Empty*
        name: Empty
        nameWithType: PriorityQueue(Of T).Empty
        qualifiedName: System.Collections.PriorityQueue(Of T).Empty
    isDefinition: true
    commentId: Overload:System.Collections.PriorityQueue`1.Empty
  System.Collections.PriorityQueue`1:
    name:
      CSharp:
      - id: System.Collections.PriorityQueue`1
        name: PriorityQueue
        nameWithType: PriorityQueue
        qualifiedName: System.Collections.PriorityQueue
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.PriorityQueue`1
        name: PriorityQueue
        nameWithType: PriorityQueue
        qualifiedName: System.Collections.PriorityQueue
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.PriorityQueue`1
  System.Func`3:
    name:
      CSharp:
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T1
        nameWithType: T1
        qualifiedName: T1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T2
        nameWithType: T2
        qualifiedName: T2
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T1
        nameWithType: T1
        qualifiedName: T1
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T2
        nameWithType: T2
        qualifiedName: T2
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: TResult
        nameWithType: TResult
        qualifiedName: TResult
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Func`3
  System.Func{{T},{T},System.Int32}:
    name:
      CSharp:
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Func`3
        name: Func
        nameWithType: Func
        qualifiedName: System.Func
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ', '
        nameWithType: ', '
        qualifiedName: ', '
      - id: System.Int32
        name: Int32
        nameWithType: Int32
        qualifiedName: System.Int32
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Func`3
    parent: System
    commentId: T:System.Func{`0,`0,System.Int32}
  System.Collections.PriorityQueue`1.#ctor*:
    name:
      CSharp:
      - id: System.Collections.PriorityQueue`1.#ctor*
        name: PriorityQueue
        nameWithType: PriorityQueue<T>.PriorityQueue
        qualifiedName: System.Collections.PriorityQueue<T>.PriorityQueue
      VB:
      - id: System.Collections.PriorityQueue`1.#ctor*
        name: PriorityQueue
        nameWithType: PriorityQueue(Of T).PriorityQueue
        qualifiedName: System.Collections.PriorityQueue(Of T).PriorityQueue
    isDefinition: true
    commentId: Overload:System.Collections.PriorityQueue`1.#ctor
  System.Collections.Generic.IEnumerable`1:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.IEnumerable`1
  System.Collections.Generic:
    name:
      CSharp:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
      VB:
      - name: System.Collections.Generic
        nameWithType: System.Collections.Generic
        qualifiedName: System.Collections.Generic
    isDefinition: true
    commentId: N:System.Collections.Generic
  System.Collections.Generic.IEnumerable{{T}}:
    name:
      CSharp:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.IEnumerable`1
        name: IEnumerable
        nameWithType: IEnumerable
        qualifiedName: System.Collections.Generic.IEnumerable
        isExternal: true
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: false
    definition: System.Collections.Generic.IEnumerable`1
    parent: System.Collections.Generic
    commentId: T:System.Collections.Generic.IEnumerable{`0}
  T:
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: true
  '{T}':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
    isDefinition: false
    definition: T
    commentId: '!:T'
  System.Collections.PriorityQueue`1.Enqueue*:
    name:
      CSharp:
      - id: System.Collections.PriorityQueue`1.Enqueue*
        name: Enqueue
        nameWithType: PriorityQueue<T>.Enqueue
        qualifiedName: System.Collections.PriorityQueue<T>.Enqueue
      VB:
      - id: System.Collections.PriorityQueue`1.Enqueue*
        name: Enqueue
        nameWithType: PriorityQueue(Of T).Enqueue
        qualifiedName: System.Collections.PriorityQueue(Of T).Enqueue
    isDefinition: true
    commentId: Overload:System.Collections.PriorityQueue`1.Enqueue
  System.Collections.PriorityQueue`1.Dequeue*:
    name:
      CSharp:
      - id: System.Collections.PriorityQueue`1.Dequeue*
        name: Dequeue
        nameWithType: PriorityQueue<T>.Dequeue
        qualifiedName: System.Collections.PriorityQueue<T>.Dequeue
      VB:
      - id: System.Collections.PriorityQueue`1.Dequeue*
        name: Dequeue
        nameWithType: PriorityQueue(Of T).Dequeue
        qualifiedName: System.Collections.PriorityQueue(Of T).Dequeue
    isDefinition: true
    commentId: Overload:System.Collections.PriorityQueue`1.Dequeue
  System.Collections.PriorityQueue`1.Peek*:
    name:
      CSharp:
      - id: System.Collections.PriorityQueue`1.Peek*
        name: Peek
        nameWithType: PriorityQueue<T>.Peek
        qualifiedName: System.Collections.PriorityQueue<T>.Peek
      VB:
      - id: System.Collections.PriorityQueue`1.Peek*
        name: Peek
        nameWithType: PriorityQueue(Of T).Peek
        qualifiedName: System.Collections.PriorityQueue(Of T).Peek
    isDefinition: true
    commentId: Overload:System.Collections.PriorityQueue`1.Peek
  System.Collections.PriorityQueue`1.Clear*:
    name:
      CSharp:
      - id: System.Collections.PriorityQueue`1.Clear*
        name: Clear
        nameWithType: PriorityQueue<T>.Clear
        qualifiedName: System.Collections.PriorityQueue<T>.Clear
      VB:
      - id: System.Collections.PriorityQueue`1.Clear*
        name: Clear
        nameWithType: PriorityQueue(Of T).Clear
        qualifiedName: System.Collections.PriorityQueue(Of T).Clear
    isDefinition: true
    commentId: Overload:System.Collections.PriorityQueue`1.Clear
  System.Collections.PriorityQueue`1.Contains*:
    name:
      CSharp:
      - id: System.Collections.PriorityQueue`1.Contains*
        name: Contains
        nameWithType: PriorityQueue<T>.Contains
        qualifiedName: System.Collections.PriorityQueue<T>.Contains
      VB:
      - id: System.Collections.PriorityQueue`1.Contains*
        name: Contains
        nameWithType: PriorityQueue(Of T).Contains
        qualifiedName: System.Collections.PriorityQueue(Of T).Contains
    isDefinition: true
    commentId: Overload:System.Collections.PriorityQueue`1.Contains
  '{T}[]':
    name:
      CSharp:
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '[]'
        nameWithType: '[]'
        qualifiedName: '[]'
      VB:
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: ()
        nameWithType: ()
        qualifiedName: ()
    isDefinition: false
  System.Collections.PriorityQueue`1.CopyTo*:
    name:
      CSharp:
      - id: System.Collections.PriorityQueue`1.CopyTo*
        name: CopyTo
        nameWithType: PriorityQueue<T>.CopyTo
        qualifiedName: System.Collections.PriorityQueue<T>.CopyTo
      VB:
      - id: System.Collections.PriorityQueue`1.CopyTo*
        name: CopyTo
        nameWithType: PriorityQueue(Of T).CopyTo
        qualifiedName: System.Collections.PriorityQueue(Of T).CopyTo
    isDefinition: true
    commentId: Overload:System.Collections.PriorityQueue`1.CopyTo
  System.Collections.PriorityQueue`1.ToArray*:
    name:
      CSharp:
      - id: System.Collections.PriorityQueue`1.ToArray*
        name: ToArray
        nameWithType: PriorityQueue<T>.ToArray
        qualifiedName: System.Collections.PriorityQueue<T>.ToArray
      VB:
      - id: System.Collections.PriorityQueue`1.ToArray*
        name: ToArray
        nameWithType: PriorityQueue(Of T).ToArray
        qualifiedName: System.Collections.PriorityQueue(Of T).ToArray
    isDefinition: true
    commentId: Overload:System.Collections.PriorityQueue`1.ToArray
  System.Collections.PriorityQueue`1.TrimExcess*:
    name:
      CSharp:
      - id: System.Collections.PriorityQueue`1.TrimExcess*
        name: TrimExcess
        nameWithType: PriorityQueue<T>.TrimExcess
        qualifiedName: System.Collections.PriorityQueue<T>.TrimExcess
      VB:
      - id: System.Collections.PriorityQueue`1.TrimExcess*
        name: TrimExcess
        nameWithType: PriorityQueue(Of T).TrimExcess
        qualifiedName: System.Collections.PriorityQueue(Of T).TrimExcess
    isDefinition: true
    commentId: Overload:System.Collections.PriorityQueue`1.TrimExcess
  System.String:
    name:
      CSharp:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
      VB:
      - id: System.String
        name: String
        nameWithType: String
        qualifiedName: System.String
        isExternal: true
    isDefinition: true
    parent: System
    commentId: T:System.String
  System.Object.ToString:
    name:
      CSharp:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.ToString
        name: ToString
        nameWithType: Object.ToString
        qualifiedName: System.Object.ToString
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.ToString
  System.Collections.PriorityQueue`1.ToString*:
    name:
      CSharp:
      - id: System.Collections.PriorityQueue`1.ToString*
        name: ToString
        nameWithType: PriorityQueue<T>.ToString
        qualifiedName: System.Collections.PriorityQueue<T>.ToString
      VB:
      - id: System.Collections.PriorityQueue`1.ToString*
        name: ToString
        nameWithType: PriorityQueue(Of T).ToString
        qualifiedName: System.Collections.PriorityQueue(Of T).ToString
    isDefinition: true
    commentId: Overload:System.Collections.PriorityQueue`1.ToString
  System.Object.Equals(System.Object):
    name:
      CSharp:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.Equals(System.Object)
        name: Equals
        nameWithType: Object.Equals
        qualifiedName: System.Object.Equals
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - id: System.Object
        name: Object
        nameWithType: Object
        qualifiedName: System.Object
        isExternal: true
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.Equals(System.Object)
  System.Collections.PriorityQueue`1.Equals*:
    name:
      CSharp:
      - id: System.Collections.PriorityQueue`1.Equals*
        name: Equals
        nameWithType: PriorityQueue<T>.Equals
        qualifiedName: System.Collections.PriorityQueue<T>.Equals
      VB:
      - id: System.Collections.PriorityQueue`1.Equals*
        name: Equals
        nameWithType: PriorityQueue(Of T).Equals
        qualifiedName: System.Collections.PriorityQueue(Of T).Equals
    isDefinition: true
    commentId: Overload:System.Collections.PriorityQueue`1.Equals
  System.Object.GetHashCode:
    name:
      CSharp:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
      VB:
      - id: System.Object.GetHashCode
        name: GetHashCode
        nameWithType: Object.GetHashCode
        qualifiedName: System.Object.GetHashCode
        isExternal: true
      - name: (
        nameWithType: (
        qualifiedName: (
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    parent: System.Object
    commentId: M:System.Object.GetHashCode
  System.Collections.PriorityQueue`1.GetHashCode*:
    name:
      CSharp:
      - id: System.Collections.PriorityQueue`1.GetHashCode*
        name: GetHashCode
        nameWithType: PriorityQueue<T>.GetHashCode
        qualifiedName: System.Collections.PriorityQueue<T>.GetHashCode
      VB:
      - id: System.Collections.PriorityQueue`1.GetHashCode*
        name: GetHashCode
        nameWithType: PriorityQueue(Of T).GetHashCode
        qualifiedName: System.Collections.PriorityQueue(Of T).GetHashCode
    isDefinition: true
    commentId: Overload:System.Collections.PriorityQueue`1.GetHashCode
  System.Collections:
    name:
      CSharp:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
      VB:
      - name: System.Collections
        nameWithType: System.Collections
        qualifiedName: System.Collections
    isDefinition: true
    commentId: N:System.Collections
  System.IComparable:
    commentId: T:System.IComparable
  System.Collections.Generic.PriorityQueue`1.Count*:
    name:
      CSharp:
      - id: System.Collections.Generic.PriorityQueue`1.Count*
        name: Count
        nameWithType: PriorityQueue<T>.Count
        qualifiedName: System.Collections.Generic.PriorityQueue<T>.Count
      VB:
      - id: System.Collections.Generic.PriorityQueue`1.Count*
        name: Count
        nameWithType: PriorityQueue(Of T).Count
        qualifiedName: System.Collections.Generic.PriorityQueue(Of T).Count
    isDefinition: true
    commentId: Overload:System.Collections.Generic.PriorityQueue`1.Count
  System.Collections.Generic.PriorityQueue`1.Empty*:
    name:
      CSharp:
      - id: System.Collections.Generic.PriorityQueue`1.Empty*
        name: Empty
        nameWithType: PriorityQueue<T>.Empty
        qualifiedName: System.Collections.Generic.PriorityQueue<T>.Empty
      VB:
      - id: System.Collections.Generic.PriorityQueue`1.Empty*
        name: Empty
        nameWithType: PriorityQueue(Of T).Empty
        qualifiedName: System.Collections.Generic.PriorityQueue(Of T).Empty
    isDefinition: true
    commentId: Overload:System.Collections.Generic.PriorityQueue`1.Empty
  System.Collections.Generic.PriorityQueue`1:
    name:
      CSharp:
      - id: System.Collections.Generic.PriorityQueue`1
        name: PriorityQueue
        nameWithType: PriorityQueue
        qualifiedName: System.Collections.Generic.PriorityQueue
      - name: <
        nameWithType: <
        qualifiedName: <
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: '>'
        nameWithType: '>'
        qualifiedName: '>'
      VB:
      - id: System.Collections.Generic.PriorityQueue`1
        name: PriorityQueue
        nameWithType: PriorityQueue
        qualifiedName: System.Collections.Generic.PriorityQueue
      - name: '(Of '
        nameWithType: '(Of '
        qualifiedName: '(Of '
      - name: T
        nameWithType: T
        qualifiedName: T
      - name: )
        nameWithType: )
        qualifiedName: )
    isDefinition: true
    commentId: T:System.Collections.Generic.PriorityQueue`1
  System.Collections.Generic.PriorityQueue`1.#ctor*:
    name:
      CSharp:
      - id: System.Collections.Generic.PriorityQueue`1.#ctor*
        name: PriorityQueue
        nameWithType: PriorityQueue<T>.PriorityQueue
        qualifiedName: System.Collections.Generic.PriorityQueue<T>.PriorityQueue
      VB:
      - id: System.Collections.Generic.PriorityQueue`1.#ctor*
        name: PriorityQueue
        nameWithType: PriorityQueue(Of T).PriorityQueue
        qualifiedName: System.Collections.Generic.PriorityQueue(Of T).PriorityQueue
    isDefinition: true
    commentId: Overload:System.Collections.Generic.PriorityQueue`1.#ctor
  System.Collections.Generic.PriorityQueue`1.Enqueue*:
    name:
      CSharp:
      - id: System.Collections.Generic.PriorityQueue`1.Enqueue*
        name: Enqueue
        nameWithType: PriorityQueue<T>.Enqueue
        qualifiedName: System.Collections.Generic.PriorityQueue<T>.Enqueue
      VB:
      - id: System.Collections.Generic.PriorityQueue`1.Enqueue*
        name: Enqueue
        nameWithType: PriorityQueue(Of T).Enqueue
        qualifiedName: System.Collections.Generic.PriorityQueue(Of T).Enqueue
    isDefinition: true
    commentId: Overload:System.Collections.Generic.PriorityQueue`1.Enqueue
  System.Collections.Generic.PriorityQueue`1.Dequeue*:
    name:
      CSharp:
      - id: System.Collections.Generic.PriorityQueue`1.Dequeue*
        name: Dequeue
        nameWithType: PriorityQueue<T>.Dequeue
        qualifiedName: System.Collections.Generic.PriorityQueue<T>.Dequeue
      VB:
      - id: System.Collections.Generic.PriorityQueue`1.Dequeue*
        name: Dequeue
        nameWithType: PriorityQueue(Of T).Dequeue
        qualifiedName: System.Collections.Generic.PriorityQueue(Of T).Dequeue
    isDefinition: true
    commentId: Overload:System.Collections.Generic.PriorityQueue`1.Dequeue
  System.Collections.Generic.PriorityQueue`1.Peek*:
    name:
      CSharp:
      - id: System.Collections.Generic.PriorityQueue`1.Peek*
        name: Peek
        nameWithType: PriorityQueue<T>.Peek
        qualifiedName: System.Collections.Generic.PriorityQueue<T>.Peek
      VB:
      - id: System.Collections.Generic.PriorityQueue`1.Peek*
        name: Peek
        nameWithType: PriorityQueue(Of T).Peek
        qualifiedName: System.Collections.Generic.PriorityQueue(Of T).Peek
    isDefinition: true
    commentId: Overload:System.Collections.Generic.PriorityQueue`1.Peek
  System.Collections.Generic.PriorityQueue`1.Clear*:
    name:
      CSharp:
      - id: System.Collections.Generic.PriorityQueue`1.Clear*
        name: Clear
        nameWithType: PriorityQueue<T>.Clear
        qualifiedName: System.Collections.Generic.PriorityQueue<T>.Clear
      VB:
      - id: System.Collections.Generic.PriorityQueue`1.Clear*
        name: Clear
        nameWithType: PriorityQueue(Of T).Clear
        qualifiedName: System.Collections.Generic.PriorityQueue(Of T).Clear
    isDefinition: true
    commentId: Overload:System.Collections.Generic.PriorityQueue`1.Clear
  System.Collections.Generic.PriorityQueue`1.Contains*:
    name:
      CSharp:
      - id: System.Collections.Generic.PriorityQueue`1.Contains*
        name: Contains
        nameWithType: PriorityQueue<T>.Contains
        qualifiedName: System.Collections.Generic.PriorityQueue<T>.Contains
      VB:
      - id: System.Collections.Generic.PriorityQueue`1.Contains*
        name: Contains
        nameWithType: PriorityQueue(Of T).Contains
        qualifiedName: System.Collections.Generic.PriorityQueue(Of T).Contains
    isDefinition: true
    commentId: Overload:System.Collections.Generic.PriorityQueue`1.Contains
  System.Collections.Generic.PriorityQueue`1.CopyTo*:
    name:
      CSharp:
      - id: System.Collections.Generic.PriorityQueue`1.CopyTo*
        name: CopyTo
        nameWithType: PriorityQueue<T>.CopyTo
        qualifiedName: System.Collections.Generic.PriorityQueue<T>.CopyTo
      VB:
      - id: System.Collections.Generic.PriorityQueue`1.CopyTo*
        name: CopyTo
        nameWithType: PriorityQueue(Of T).CopyTo
        qualifiedName: System.Collections.Generic.PriorityQueue(Of T).CopyTo
    isDefinition: true
    commentId: Overload:System.Collections.Generic.PriorityQueue`1.CopyTo
  System.Collections.Generic.PriorityQueue`1.ToArray*:
    name:
      CSharp:
      - id: System.Collections.Generic.PriorityQueue`1.ToArray*
        name: ToArray
        nameWithType: PriorityQueue<T>.ToArray
        qualifiedName: System.Collections.Generic.PriorityQueue<T>.ToArray
      VB:
      - id: System.Collections.Generic.PriorityQueue`1.ToArray*
        name: ToArray
        nameWithType: PriorityQueue(Of T).ToArray
        qualifiedName: System.Collections.Generic.PriorityQueue(Of T).ToArray
    isDefinition: true
    commentId: Overload:System.Collections.Generic.PriorityQueue`1.ToArray
  System.Collections.Generic.PriorityQueue`1.TrimExcess*:
    name:
      CSharp:
      - id: System.Collections.Generic.PriorityQueue`1.TrimExcess*
        name: TrimExcess
        nameWithType: PriorityQueue<T>.TrimExcess
        qualifiedName: System.Collections.Generic.PriorityQueue<T>.TrimExcess
      VB:
      - id: System.Collections.Generic.PriorityQueue`1.TrimExcess*
        name: TrimExcess
        nameWithType: PriorityQueue(Of T).TrimExcess
        qualifiedName: System.Collections.Generic.PriorityQueue(Of T).TrimExcess
    isDefinition: true
    commentId: Overload:System.Collections.Generic.PriorityQueue`1.TrimExcess
  System.Collections.Generic.PriorityQueue`1.ToString*:
    name:
      CSharp:
      - id: System.Collections.Generic.PriorityQueue`1.ToString*
        name: ToString
        nameWithType: PriorityQueue<T>.ToString
        qualifiedName: System.Collections.Generic.PriorityQueue<T>.ToString
      VB:
      - id: System.Collections.Generic.PriorityQueue`1.ToString*
        name: ToString
        nameWithType: PriorityQueue(Of T).ToString
        qualifiedName: System.Collections.Generic.PriorityQueue(Of T).ToString
    isDefinition: true
    commentId: Overload:System.Collections.Generic.PriorityQueue`1.ToString
  System.Collections.Generic.PriorityQueue`1.Equals*:
    name:
      CSharp:
      - id: System.Collections.Generic.PriorityQueue`1.Equals*
        name: Equals
        nameWithType: PriorityQueue<T>.Equals
        qualifiedName: System.Collections.Generic.PriorityQueue<T>.Equals
      VB:
      - id: System.Collections.Generic.PriorityQueue`1.Equals*
        name: Equals
        nameWithType: PriorityQueue(Of T).Equals
        qualifiedName: System.Collections.Generic.PriorityQueue(Of T).Equals
    isDefinition: true
    commentId: Overload:System.Collections.Generic.PriorityQueue`1.Equals
  System.Collections.Generic.PriorityQueue`1.GetHashCode*:
    name:
      CSharp:
      - id: System.Collections.Generic.PriorityQueue`1.GetHashCode*
        name: GetHashCode
        nameWithType: PriorityQueue<T>.GetHashCode
        qualifiedName: System.Collections.Generic.PriorityQueue<T>.GetHashCode
      VB:
      - id: System.Collections.Generic.PriorityQueue`1.GetHashCode*
        name: GetHashCode
        nameWithType: PriorityQueue(Of T).GetHashCode
        qualifiedName: System.Collections.Generic.PriorityQueue(Of T).GetHashCode
    isDefinition: true
    commentId: Overload:System.Collections.Generic.PriorityQueue`1.GetHashCode
